Day 1
Interpreted language Vs compiled language
Interpreted Languages:
1. Execution: Code is executed line-by-line by an interpreter.
2. Compilation: No compilation step; code is interpreted directly.
3. Performance: Typically, slower due to real-time interpretation.
4. Development Cycle: Faster, as changes can be tested immediately without recompilation.
5. Portability: Generally, more portable; the same code can run on different platforms without modification.
6. Error Handling: Errors are detected at runtime.
7. Examples: Python, JavaScript, Ruby, PHP.

 Compiled Languages:
1. Execution: Code is first compiled into machine code, then executed by the CPU.
2. Compilation: Requires a separate compilation step before execution.
3. Performance: Generally faster because the code is precompiled into machine language.
4. Development Cycle: Slower due to the need for compilation after every change.
5. Portability: Less portable; may require recompilation for different platforms.
6. Error Handling: Many errors are caught during compilation, before execution.
7. Examples: C, C++, Rust, Go


